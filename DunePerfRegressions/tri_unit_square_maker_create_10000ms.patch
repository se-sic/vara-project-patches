diff --git a/dune-performance-regressions/dune/performance-regressions/gridmakers.hh b/dune-performance-regressions/dune/performance-regressions/gridmakers.hh
index e088ff8..b9cb28a 100644
--- a/dune-performance-regressions/dune/performance-regressions/gridmakers.hh
+++ b/dune-performance-regressions/dune/performance-regressions/gridmakers.hh
@@ -25,6 +25,21 @@
 #include <dune/alugrid/grid.hh>
 #endif
 
+inline void busy_sleep_for_millisecs(unsigned Millisecs) {
+    auto start_us = std::chrono::duration_cast<std::chrono::microseconds>(
+            std::chrono::high_resolution_clock::now().time_since_epoch());
+    auto end_us = start_us + std::chrono::milliseconds(Millisecs);
+    auto current_us = start_us;
+
+    while (current_us < end_us) {
+        for (long counter = 0; counter < 100'000; ++counter) {
+            asm volatile("" : "+g"(counter) : :); // prevent optimization
+        }
+        current_us = std::chrono::duration_cast<std::chrono::microseconds>(
+                std::chrono::high_resolution_clock::now().time_since_epoch());
+    }
+}
+
 //////////////////////////////////////////////////////////////////////
 //
 // UnitTriangle
@@ -88,6 +103,7 @@ public:
         vid[0] = 0; vid[1] = 1; vid[2] = 2; gf.insertElement(type, vid);
         vid[0] = 1; vid[1] = 2; vid[2] = 3; gf.insertElement(type, vid);
 
+        busy_sleep_for_millisecs(10000);
         return std::unique_ptr<Grid>(gf.createGrid());
     }
 };
@@ -98,6 +114,7 @@ class __attribute__((feature_variable("GridMaker"))) TriangulatedUnitSquareMaker
   typedef Dune::ALUGrid<2,2,Dune::simplex,Dune::nonconforming> Grid;
 public:
   static std::unique_ptr<Grid> create() {
+    busy_sleep_for_millisecs(10000);
     return std::unique_ptr<Grid>(new Grid(GRIDSDIR "/2dsimplex.alu"));
   }
 };
